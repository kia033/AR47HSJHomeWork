// 003_MainFunction.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//
//
// 객체 지향 프로그레밍
// 객체지향, 절차지향

// 코드라는 건 컴퓨터에게 무언가를 시키는 것
// 컴퓨터는 무조건 순서가 있어야한다.
// 
// 1. 절차지향 프로그래밍
// 일이 진행되는 순서대로 프로그래밍하는 방법
// 
// 장점)
// 1) 코드의 가독성이 좋다
// 2) 컴퓨터의 처리구조와 비슷해 실행속도가 빠르다.

// 단점)
// 각각의 코드가 순서에 민감하게 연결 되어있어, 유지 및 분석이 어렵다.

// 2.객체지향 프로그래밍
// 모든 데이터를 객체(Object)로 취급하고 객체가 처리 요청을 받았을 때,
// 객체 내부에 있는 기능을 사용해 처리하는 방법
// 서로 연관되어있는 함수와 변수들을 객체라는 것으로 그룹핑.
// 그 객체에 들어있는 함수들을 호출해서 다른 함수들과 분리 / 구분해줌.
// 
// 특징)
// 1) 추상화 : 공통적인 속성이나 기능을 묶어 이름을 붙어는 것
// 2) 캡슐화 : 데이터를 은닉하고 데이터 기능을 노출시키지 않음.
// 3) 상속성 : 상위 부모 객체의 속성과 특징을 하위 객체가 물려받는 것.
// (만약 어떠한 객체가 이미 존재하고있는 객체의 특성을 가지고 있다면, 기존 객체의 특성을 상속시켜 만들 수 있음.)
// 똑같은 특성을 지닌 이미 객체가 있다면 다시 그 특성을 만들어서 객체를 생성하는 것이 아니라 상속시켜 생성한다.
// 4) 다형성: 같은 함수가 있어도 매개변수에 따라 각자 다른 일을 하는 것.
// 똑같은 int 함수를 써도 int A 와 int B는 매개변수가 다르므로 각자 다른 일을 한다.
// 
// 장점)
// 1) 코드의 재사용이 가능하다. (확장, 유지보수가 유용하다.)
// 2) 코드의 분석과 설계의 전환이 쉽다.
// 
// 단점)
// 1) 처리 속도가 상대적으로 다소 느리다.
// 2) 설계에 많은 시간이 소요된다.
// 
// 
// 3.함수형 프로그래밍
// 순수 함수를 사용해 상태를 제어하기보단, 빨리 처리하는데 초점을 둔 방법
// 실행 순서를 지정할 필요가 없기 때문에 비 절차형 언어라고도 한다.
// 
// 순수함수
// 1) 입력값이 동일하다면 리턴값도 동일하다.
// 2. 외부로부터 영향을 받지 않는다.
// 3. 함수의 실행이 프로그램에 영향을 주지 않는다.
// 4. 비상태 불변성
// 인자로 전달된 데이터를 변경하는 것이 아닌 새로운 오브젝트를 만들어 결과값으로 전달한다.
// 
// 장점)
// 1. 함수의 동작부가 간결하기때문에 객체 지향 프로그래밍에 비해 코드 이해도와 가독성이 좋다.
// 2. 테스트가 쉽다.
// 
// 단점)
// 1.외부 데이터 혹은 내부 데이터의 상태를 조작할 수 없다.
//


// 절차지향과 객체지향의 차이점
// 절차지향 프로그래밍 위에 객체지향 프로그래밍이 있다.
// 절차지향의 단점을 객체지향이 보완해주는 역할이다.
// 절차지향과 객체지향 모두 함수는 존재하지만 객체지향에는 객체라는 개념이 등장한다.
// 
// 
// 함수형과 객체지향의 차이점
// 함수형의 일급 객체 : 함수(Function)
// 객체지향의 일급 객체 : 클래스(class), 객체(Object)
// 
// 일급 객체
// 다른 요소들과 아무런 차별이 없는 객체.
// 함수의 인자로도 넘겨질 수 있고, 변수에 대입도 가능한 객체이다.
// 
// 일급 객체의 정의
// 1)함수의 실질적인 매개변수가 될 수 있다.
// 2)함수의 반환값이 될 수 있다.
// 3)할당의 대상이 될 수 있다.
// 4) 비교 연산을 적용할 수 있다.
// 
// 객체지향 프로그래밍은 프로그램을 상호작용하는 객체들의 집합으로 볼 수 있지만,
// 함수형 프로그래밍에서는 상태값을 지니지않는 함수들의 연속으로 볼 수 있다.
// 
// 객체지향 프로그래밍
// 클래스 디자인과 객체들의 관계를 중심으로 코드 작성이 이루어진다.
// 따라서 상태, 멤버변수, 메서드 등이 긴밀한 관계를 가지고 있다.
// 멤버변수가 어떤 상태를 가지고 있는 가에 따라 결과가 달라진다.

// 함수형 프로그래밍
// 값의 연산 및 결과 도출 중심으로 코드작성이 이루어진다.
// 함수는 인자로 받은 값을 별로도 저장하지 않고, 간결한 과정으로 처리하고 매핑하는데에 주 목적을 둔다.
// 
// 
//


#include <iostream>

// 진입점에서부터 실행흐름이 생긴다.
// 실행 흐름을 함수라고 한다.

int main() // 진입점 : 프로그램을 실행하겠다.
{ // 함수 시작
    std::cout << "Hello World!\n";


} // 함수의 끝



// 프로그램 : 파일이 압축된 상태, 설계도 
// 프로세스 : 프로그램이 실행된 상태 용량이 커진다. 직접적인 동작
// 하드 ( 예정된 상태 )-> ram ( 동작 요구) -> cpu (동작 실행 및 전달 ) -> ram (실행된 동작 전달받음)

